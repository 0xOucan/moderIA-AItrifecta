"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fast-password-entropy";
exports.ids = ["vendor-chunks/fast-password-entropy"];
exports.modules = {

/***/ "(ssr)/./node_modules/fast-password-entropy/src/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/fast-password-entropy/src/index.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\n\n/**\n * Calculate the entropy of a string based on the size of the charset used and\n * the length of the string.\n *\n * Based on:\n * http://resources.infosecinstitute.com/password-security-complexity-vs-length/\n *\n * @param   {number} charset is the size of the string charset.\n * @param   {number} length  is the length of the string.\n * @returns {number}         the calculated entropy.\n */\nconst calcEntropy = (charset, length) =>\n  Math.round(length * Math.log(charset) / Math.LN2)\n\n/**\n * Standard character sets list.\n *\n * It assumes the `uppercase` and `lowercase` charsets to have 26 chars as in\n * the English alphabet. Numbers are 10 characters long. Symbols are the rest\n * of the 33 remaining chars in the 7-bit ASCII table.\n *\n * @type {Array}\n */\nconst stdCharsets = [{\n  name: 'lowercase',\n  re: /[a-z]/, // abcdefghijklmnopqrstuvwxyz\n  length: 26\n}, {\n  name: 'uppercase',\n  re: /[A-Z]/, // ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  length: 26\n}, {\n  name: 'numbers',\n  re: /[0-9]/, // 1234567890\n  length: 10\n}, {\n  name: 'symbols',\n  re: /[^a-zA-Z0-9]/, //  !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ (and any other)\n  length: 33\n}]\n\n/**\n * Creates a function to calculate the total charset length of a string based on\n * the given charsets.\n *\n * @param  {Object[]} charsets are description of each charset. Shall contain a\n *                             regular expression `re` to identify each\n *                             character and a `length` with the total possible\n *                             characters in the set.\n * @returns {Function}         a function that will receive a string and return\n *                             the total charset length.\n */\nconst calcCharsetLengthWith = charsets =>\n  string =>\n    charsets.reduce((length, charset) =>\n      length + (charset.re.test(string) ? charset.length : 0), 0)\n\n/**\n * Helper function to calculate the total charset lengths of a given string\n * using the standard character sets.\n *\n * @type {Function}\n */\nconst calcCharsetLength = calcCharsetLengthWith(stdCharsets)\n\n/**\n * Calculate the given password entropy.\n *\n * @param   {string} string is the password string.\n * @returns {number}        [the calculated entropy.\n */\nconst passwordEntropy = string =>\n  string ? calcEntropy(calcCharsetLength(string), string.length) : 0\n\nmodule.exports = passwordEntropy\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmFzdC1wYXNzd29yZC1lbnRyb3B5L3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDJDQUEyQyxZQUFZLEVBQUU7QUFDekQ7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsa0JBQWtCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvYXJpaWVsbHVzZGV2L0RvY3VtZW50cy9EZXZPcHMvSGFja2F0aG9uL21vZGVySUEtQUl0cmlmZWN0YS9ub2RlX21vZHVsZXMvZmFzdC1wYXNzd29yZC1lbnRyb3B5L3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIGVudHJvcHkgb2YgYSBzdHJpbmcgYmFzZWQgb24gdGhlIHNpemUgb2YgdGhlIGNoYXJzZXQgdXNlZCBhbmRcbiAqIHRoZSBsZW5ndGggb2YgdGhlIHN0cmluZy5cbiAqXG4gKiBCYXNlZCBvbjpcbiAqIGh0dHA6Ly9yZXNvdXJjZXMuaW5mb3NlY2luc3RpdHV0ZS5jb20vcGFzc3dvcmQtc2VjdXJpdHktY29tcGxleGl0eS12cy1sZW5ndGgvXG4gKlxuICogQHBhcmFtICAge251bWJlcn0gY2hhcnNldCBpcyB0aGUgc2l6ZSBvZiB0aGUgc3RyaW5nIGNoYXJzZXQuXG4gKiBAcGFyYW0gICB7bnVtYmVyfSBsZW5ndGggIGlzIHRoZSBsZW5ndGggb2YgdGhlIHN0cmluZy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9ICAgICAgICAgdGhlIGNhbGN1bGF0ZWQgZW50cm9weS5cbiAqL1xuY29uc3QgY2FsY0VudHJvcHkgPSAoY2hhcnNldCwgbGVuZ3RoKSA9PlxuICBNYXRoLnJvdW5kKGxlbmd0aCAqIE1hdGgubG9nKGNoYXJzZXQpIC8gTWF0aC5MTjIpXG5cbi8qKlxuICogU3RhbmRhcmQgY2hhcmFjdGVyIHNldHMgbGlzdC5cbiAqXG4gKiBJdCBhc3N1bWVzIHRoZSBgdXBwZXJjYXNlYCBhbmQgYGxvd2VyY2FzZWAgY2hhcnNldHMgdG8gaGF2ZSAyNiBjaGFycyBhcyBpblxuICogdGhlIEVuZ2xpc2ggYWxwaGFiZXQuIE51bWJlcnMgYXJlIDEwIGNoYXJhY3RlcnMgbG9uZy4gU3ltYm9scyBhcmUgdGhlIHJlc3RcbiAqIG9mIHRoZSAzMyByZW1haW5pbmcgY2hhcnMgaW4gdGhlIDctYml0IEFTQ0lJIHRhYmxlLlxuICpcbiAqIEB0eXBlIHtBcnJheX1cbiAqL1xuY29uc3Qgc3RkQ2hhcnNldHMgPSBbe1xuICBuYW1lOiAnbG93ZXJjYXNlJyxcbiAgcmU6IC9bYS16XS8sIC8vIGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XG4gIGxlbmd0aDogMjZcbn0sIHtcbiAgbmFtZTogJ3VwcGVyY2FzZScsXG4gIHJlOiAvW0EtWl0vLCAvLyBBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlxuICBsZW5ndGg6IDI2XG59LCB7XG4gIG5hbWU6ICdudW1iZXJzJyxcbiAgcmU6IC9bMC05XS8sIC8vIDEyMzQ1Njc4OTBcbiAgbGVuZ3RoOiAxMFxufSwge1xuICBuYW1lOiAnc3ltYm9scycsXG4gIHJlOiAvW15hLXpBLVowLTldLywgLy8gICFcIiMkJSYnKCkqKywtLi86Ozw9Pj9AW1xcXV5fYHt8fX4gKGFuZCBhbnkgb3RoZXIpXG4gIGxlbmd0aDogMzNcbn1dXG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSB0aGUgdG90YWwgY2hhcnNldCBsZW5ndGggb2YgYSBzdHJpbmcgYmFzZWQgb25cbiAqIHRoZSBnaXZlbiBjaGFyc2V0cy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3RbXX0gY2hhcnNldHMgYXJlIGRlc2NyaXB0aW9uIG9mIGVhY2ggY2hhcnNldC4gU2hhbGwgY29udGFpbiBhXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVndWxhciBleHByZXNzaW9uIGByZWAgdG8gaWRlbnRpZnkgZWFjaFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlciBhbmQgYSBgbGVuZ3RoYCB3aXRoIHRoZSB0b3RhbCBwb3NzaWJsZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcnMgaW4gdGhlIHNldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gICAgICAgICBhIGZ1bmN0aW9uIHRoYXQgd2lsbCByZWNlaXZlIGEgc3RyaW5nIGFuZCByZXR1cm5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgdG90YWwgY2hhcnNldCBsZW5ndGguXG4gKi9cbmNvbnN0IGNhbGNDaGFyc2V0TGVuZ3RoV2l0aCA9IGNoYXJzZXRzID0+XG4gIHN0cmluZyA9PlxuICAgIGNoYXJzZXRzLnJlZHVjZSgobGVuZ3RoLCBjaGFyc2V0KSA9PlxuICAgICAgbGVuZ3RoICsgKGNoYXJzZXQucmUudGVzdChzdHJpbmcpID8gY2hhcnNldC5sZW5ndGggOiAwKSwgMClcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gY2FsY3VsYXRlIHRoZSB0b3RhbCBjaGFyc2V0IGxlbmd0aHMgb2YgYSBnaXZlbiBzdHJpbmdcbiAqIHVzaW5nIHRoZSBzdGFuZGFyZCBjaGFyYWN0ZXIgc2V0cy5cbiAqXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKi9cbmNvbnN0IGNhbGNDaGFyc2V0TGVuZ3RoID0gY2FsY0NoYXJzZXRMZW5ndGhXaXRoKHN0ZENoYXJzZXRzKVxuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgZ2l2ZW4gcGFzc3dvcmQgZW50cm9weS5cbiAqXG4gKiBAcGFyYW0gICB7c3RyaW5nfSBzdHJpbmcgaXMgdGhlIHBhc3N3b3JkIHN0cmluZy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9ICAgICAgICBbdGhlIGNhbGN1bGF0ZWQgZW50cm9weS5cbiAqL1xuY29uc3QgcGFzc3dvcmRFbnRyb3B5ID0gc3RyaW5nID0+XG4gIHN0cmluZyA/IGNhbGNFbnRyb3B5KGNhbGNDaGFyc2V0TGVuZ3RoKHN0cmluZyksIHN0cmluZy5sZW5ndGgpIDogMFxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhc3N3b3JkRW50cm9weVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-password-entropy/src/index.js\n");

/***/ })

};
;